name: tests
on:
  push:
    branches:
      - main
      - branch-1.0
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 19 * * SUN'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre_commit:
    name: Run pre-commit hooks
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "1"
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: pre-commit
        uses: pre-commit/action@v3.0.0
  unit_test_suite:
    name: Unit tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        # Run on the full set on schedule, workflow_dispatch and push&tags events, otherwise on a subset.
        python-version: ${{ ( github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || ( github.event_name == 'push' && github.ref_type == 'tag' ) ) && fromJSON('["3.8", "3.9", "3.10", "3.11"]') || fromJSON('["3.8", "3.9", "3.11"]') }}
    timeout-minutes: 90
    env:
      DESC: "Python ${{ matrix.python-version }} tests"
      PYTHON_VERSION: ${{ matrix.python-version }}
      DISPLAY: ":99.0"
      PYTHONIOENCODING: "utf-8"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Without this env var `doit env_create ...` uses by default
      # the `pyviz` channel, except that we don't want to configure
      # it as one of the sources.
      PYCTDEV_SELF_CHANNEL: "pyviz/label/dev"
      OMP_NUM_THREADS: 1
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
          # Forcing fetch to avoid 'would clobber existing tag', as the previous step
          # fetches tags already.
      - run: git fetch --prune --tags --unshallow --force
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          auto-activate-base: true
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Set up environment
        run: |
          conda info
          pip install --upgrade pip
          pip install hatch hatch-conda wheel
          hatch -v env create test.py${{ matrix.python-version }}
      - name: Run unit test suite
        run: |
          hatch -v run test.py${{ matrix.python-version }}:run
      - name: Run example test suite
        run: |
          hatch -v run test.py${{ matrix.python-version }}:run-examples
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unitexamples-tests
          fail_ci_if_error: false
  ui_test_suite:
    name: UI tests on ${{ matrix.os }} with Python 3.9
    needs: [pre_commit]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
    timeout-minutes: 60
    env:
      DESC: "Python ${{ matrix.python-version }} tests"
      PYTHONIOENCODING: "utf-8"
      PANEL_LOG_LEVEL: info
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "100"
          # Forcing fetch to avoid 'would clobber existing tag', as the previous step
          # fetches tags already.
      - run: git fetch --prune --tags --unshallow --force
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          auto-update-conda: true
          auto-activate-base: true
      - uses: actions/setup-node@v1
        with:
          node-version: 16.x
      - name: Set up environment
        run: |
          pip install --upgrade pip
          pip install hatch hatch-conda wheel
          hatch -v env create test-ui.py3.10
      - name: Run UI test suite
        run: |
          hatch run jupyterlite:build
          hatch -v run test-ui.py3.10:run
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: ui-tests
          fail_ci_if_error: false # optional (default = false)
